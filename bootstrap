#!/bin/bash
set -euo pipefail

info() {
  printf "[\033[00;34mINFO\033[0m] $1\n"
}

success() {
  printf "[\033[00;32mOK\033[0m] $1\n"
}

error() {
  printf "[\033[00;31mERROR\033[0m] $1\n"
}

big_info() {
  printf "\e[34m
==============================
$1
==============================\n\e[m"
}

bootstrap() {
  # 引数の処理を追加
  SKIP_INITIAL_SETUP="false"
  GIT_REPO=""
  SKIP_REPO_SAVE="false"

  # webhookのURLを追加
  WEBHOOK_URL=""
  while getopts "sr:nw:" opt; do
    case $opt in
      s) SKIP_INITIAL_SETUP="true" ;;
      r) GIT_REPO="$OPTARG" ;;
      n) SKIP_REPO_SAVE="true" ;;
      w) WEBHOOK_URL="$OPTARG" ;;
    esac
  done

  info "setup"
  initial_setup "$SKIP_INITIAL_SETUP"

  # 以下同じマシンで複数回走らせて問題ない

  # ifstat: ネットワークの帯域を確認するためのもの
  sudo apt-get install -y ifstat gpg net-tools unzip

  info "start install tools"
  install_all "$WEBHOOK_URL"

  info "download Makefile"
  download_makefile

  info "download deploy script"
  download_deploy_script

  check

  info "script Done!"

}

initial_setup() {
  local skip_setup="$1"
  
  if [ "$skip_setup" = "true" ]; then
    info "Skipping initial setup"
    return 0
  fi

  setup
  setup_util

  info "start git init"
  git_init

  info "start git config"
  git_config "$GIT_REPO" "$SKIP_REPO_SAVE"
}

setup() {
  mkdir -p $HOME/config
  MYSQL_CONF=/etc/mysql

  sudo cp -a $MYSQL_CONF $HOME/config/mysql
  sudo rm -rf $MYSQL_CONF
  sudo ln -sf $HOME/config/mysql /etc

  NGINX_CONF=/etc/nginx

  sudo cp -a $NGINX_CONF $HOME/config/nginx
  sudo rm -rf $NGINX_CONF
  sudo ln -sf $HOME/config/nginx /etc

  sudo chown -R $(whoami) config/
}

setup_util() {
  # SSH接続を切られないようにする
  echo "ClientAliveInterval 60" | sudo tee -a /etc/ssh/sshd_config
  echo "ClientAliveCountMax 3" | sudo tee -a /etc/ssh/sshd_config
  # sudo systemctl restart ssh.service
}

git_config() {
  local repo="$1"
  local skip_save="$2"
  
  git config --global user.email "hahihu314+github@gmail.com"
  git config --global user.name "rerost"
  git config --global core.editor 'vim -c "set fenc=utf-8"'

  if [ -z "$repo" ]; then
    read -p "empty repository. e.g git@github.com:rerost/hogehoge.git: " repo
  fi
  git remote add origin "$repo"

  if [ "$skip_save" = "true" ]; then
    git fetch origin
    return 0
  fi

  info "start save"
  while :
  do
    read -p "Git added (y/n)" input
    if [ "$input" = "y" ]; then
      echo "Continue to setup!"
      break
    elif [ "$input" = "n" ]; then
      echo "Pleas git add"
    fi
  done
  git add config
  git commit -m "init"
  git push -u origin master
}

install_all() {
  local webhook_url="$1"
  install_alp
  install_pt_query_digest
  install_discocat "$webhook_url"
  install_html2png
  install_sqldef
  install_chrome
  install_golang
}


install_alp() {
  info 'Installing alp'
  wget https://github.com/tkuchiki/alp/releases/download/v1.0.7/alp_linux_amd64.zip
  unzip alp_linux_amd64.zip
  sudo mv alp /usr/bin/

  rm alp_linux_amd64.zip

  success "install alp"
}

install_slp() {
  info 'Installing slp'
  wget https://github.com/tkuchiki/slp/releases/download/v0.2.1/slp_linux_amd64.tar.gz
  tar -xvf slp_linux_amd64.tar.gz
  sudo mv slp /usr/bin
  success "install slp"
}

install_pt_query_digest() {
  info 'Install pt-query-digest'
  wget https://github.com/percona/percona-toolkit/archive/3.0.5-test.tar.gz
  tar zxvf 3.0.5-test.tar.gz
  sudo mv ./percona-toolkit-3.0.5-test/bin/pt-query-digest /usr/bin/

  rm 3.0.5-test.tar.gz
  rm -rf percona-toolkit-3.0.5-test

  success "install pt-query-digest"
}

install_discocat() {
  local webhook_url="$1"
  info 'Install discocat'

  mkdir tmp_discocat/
  cd tmp_discocat/

  # バージョンを0.1.4に更新
  wget https://github.com/rerost/discocat/releases/download/v0.1.4/discocat_Linux_x86_64.tar.gz
  tar zxvf discocat_Linux_x86_64.tar.gz
  sudo mv ./discocat /usr/bin/

  cd -
  rm -rf tmp_discocat/

  # webhook URLを設定に追加
  if [ -n "$webhook_url" ]; then
    discocat --configure --webhook "$webhook_url"
  else
    discocat --configure
  fi

  success "install discocat"
}

install_html2png() {
  info 'Install html2png'

  mkdir tmp_html2png/
  cd tmp_html2png/

  wget https://github.com/rerost/html2png/releases/download/v0.1.0/html2png_Linux_x86_64.tar.gz
  tar zxvf html2png_Linux_x86_64.tar.gz
  sudo mv ./html2png /usr/bin/

  cd -
  rm -rf tmp_html2png/

  success "install html2png"
}

install_pprotein() {
  info 'Install pprotein'

  sudo apt install -y graphviz gv
  wget https://github.com/kaz/pprotein/releases/download/v1.2.4/pprotein_1.2.4_linux_amd64.tar.gz
  tar -xvf pprotein_1.2.4_linux_amd64.tar.gz
  sudo cp ~/pprotein /usr/bin/

  success "install pprotein"
}

install_sqldef() {
  info 'Install sqldef'

  wget -O - https://github.com/sqldef/sqldef/releases/latest/download/mysqldef_linux_amd64.tar.gz | tar xvz

  sudo mv ./mysqldef /usr/bin/
  sudo chmod +x /usr/bin/mysqldef

  success "install sqldef"
}

install_chrome() {
  wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-chrome-keyring.gpg
  echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
  sudo apt-get update
  sudo apt-get install -y google-chrome-stable
}

install_golang() {
  info 'Install golang'

  # /usr/bin に go があるか確認
  if [ -f /usr/bin/go ]; then
      success "Go is installed at /usr/bin/go."
      return
  fi
  
  # which go で結果が返ってくるか確認
  if which go > /dev/null 2>&1; then
      success "Go is found in PATH: $(which go)"
      return
  fi

  # Goがない場合、最新のGoをインストール
  curl -o go.tar.gz https://dl.google.com/go/go1.23.3.linux-amd64.tar.gz
  sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go.tar.gz
  sudo ln -sf /usr/local/go/bin/go /usr/bin/go
  which go

  success "install golang"
}

git_init() {
  git init
  git branch -M master

  # Chceck SSH
  set +e
  ssh -T git@github.com
  set -e
}

checking() {
  which $1 > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    success "$1"
  else
    error "$1"
  fi
}

file_check() {
  big_info "file checking!"

  FILES=(bootstrap Makefile deploy deploy_on_remote)

  for f in ${FILES[@]}; do
    if [ -e $f ]; then
      git add $f
      success "$f exists"
    else
      error "$f not exists"
    fi
  done

  # dump.sql はサイズが大きいため
  echo "dump.sql" >> .gitignore

  git commit -m "add files"
}

check() {
  big_info "install checking!"

  COMMANDS=(alp pt-query-digest htop discocat)

  for c in ${COMMANDS[@]}; do
    checking $c
  done

  file_check
}

download_makefile() {
  curl -O https://raw.githubusercontent.com/rerost/isucon-magic-powder/refs/heads/master/Makefile
}

download_deploy_script() {
  curl -O https://raw.githubusercontent.com/rerost/isucon-magic-powder/refs/heads/master/deploy
  chmod +x deploy

  curl -O https://raw.githubusercontent.com/rerost/isucon-magic-powder/refs/heads/master/deploy_on_remote
  chmod +x deploy_on_remote
}

bootstrap
